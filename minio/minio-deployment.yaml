apiVersion: apps/v1
kind: Deployment
metadata:
  # This name uniquely identifies the Deployment
  name: minio
spec:
  selector:
    matchLabels:
      app: minio # has to match .spec.template.metadata.labels
  strategy:
    # Specifies the strategy used to replace old Pods by new ones
    # Refer: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
    type: Recreate
  template:
    metadata:
      labels:
        # This label is used as a selector in Service definition
        app: minio
    spec:
      nodeSelector:
        kubernetes.io/hostname: minikube # Specify a node label associated to the Worker Node on which you want to deploy the pod.
      # Volumes used by this deployment
      volumes:
        - name: data
          hostPath: # MinIO generally recommends using locally-attached volumes
            path: /mnt/disk1/data # Specify a path to a local drive or volume on the Kubernetes worker node
            type: DirectoryOrCreate # The path to the last directory must exist
      containers:
        - name: minio
          # Volume mounts for this container
          volumeMounts:
            # Volume 'data' is mounted to path '/data'
            - name: data
              mountPath: /data
          # Pulls the latest Minio image from Docker Hub
          image: minio/minio:RELEASE.2023-09-30T07-02-29Z
          args:
            - server
            - --console-address
            - :9001
            - /data
          envFrom:
            - secretRef:
                name: minio-secrets
          ports:
            - containerPort: 9000
            - containerPort: 9001
          # Readiness probe detects situations when MinIO server instance
          # is not ready to accept traffic. Kubernetes doesn't forward
          # traffic to the pod while readiness checks fail.
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: 9000
            initialDelaySeconds: 120
            periodSeconds: 20
          # Liveness probe detects situations where MinIO server instance
          # is not working properly and needs restart. Kubernetes automatically
          # restarts the pods if liveness checks fail.
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
            initialDelaySeconds: 120
            periodSeconds: 20

---
apiVersion: v1
kind: Service
metadata:
  # This name uniquely identifies the service
  name: minio-service
spec:
  ports:
    - name: server-port
      port: 9000
      targetPort: 9000
      protocol: TCP

    - name: console-port
      port: 9001
      targetPort: 9001
      protocol: TCP
  selector:
    # Looks for labels `app:minio` in the namespace and applies the spec
    app: minio